{"version":3,"sources":["components/form/form4.js","components/app/app.js","index.js"],"names":["MyTextInput","label","props","useField","field","meta","id","name","htmlFor","className","touched","error","MyCheckbox","children","type","SignupForm","initialValues","firstName","lastName","email","acceptedTerms","validationSchema","Yup","max","required","oneOf","onSubmit","values","setSubmitting","setTimeout","render","placeholder","arrayHelpers","friends","length","map","friend","index","key","onPressEnter","evt","preventDefault","insert","document","getElementById","focus","push","onClick","htmlType","App","ReactDOM"],"mappings":"0UAWMA,G,OAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,2BAGrBC,YAASD,GAHY,mBAGpCE,EAHoC,KAG7BC,EAH6B,KAInCC,EAAaJ,EAAbI,GAAIC,EAASL,EAATK,KACZ,OACE,oCACE,2BAAOC,QAASF,GAAMC,GAAON,GAC7B,kBAAC,IAAD,eAAOQ,UAAU,cAAiBL,EAAWF,IAC5CG,EAAKK,SAAWL,EAAKM,MAAQ,yBAAKF,UAAU,SAASJ,EAAKM,OAAe,QAK1EC,EAAa,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAaX,EAAY,8BAIvBC,YAAS,2BAAKD,GAAN,IAAaY,KAAM,cAJJ,mBAItCV,EAJsC,KAI/BC,EAJ+B,KAK7C,OACE,oCACE,2BAAOI,UAAU,YACf,kBAAC,IAAD,iBAAcL,EAAWF,IACxBW,GAEFR,EAAKK,SAAWL,EAAKM,MAAQ,yBAAKF,UAAU,SAASJ,EAAKM,OAAe,OAwGjEI,EA7FI,kBACjB,oCACE,0CACA,kBAAC,IAAD,CACEC,cAAe,CACbC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,eAAe,GAEjBC,iBAAkBC,IAAW,CAC3BL,UAAWK,MAAaC,IAAI,GAAI,iCAAiCC,SAAS,YAC1EN,SAAUI,MAAaC,IAAI,GAAI,iCAAiCC,SAAS,YACzEL,MAAOG,MAAaH,MAAM,yBAAyBK,SAAS,YAC5DJ,cAAeE,MACZE,SAAS,YACTC,MAAM,EAAC,GAAO,+CAEnBC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBC,YAAW,WAETD,GAAc,KACb,MAELE,OAAQ,gBAAGH,EAAH,EAAGA,OAAH,OACN,kBAAC,IAAD,CAAMlB,UAAU,QACd,kBAAC,EAAD,CACER,MAAM,aACNM,KAAK,YACLO,KAAK,OACLiB,YAAY,OACZtB,UAAU,UAEZ,kBAAC,EAAD,CACER,MAAM,YACNM,KAAK,WACLO,KAAK,OACLiB,YAAY,MACZtB,UAAU,UAEZ,kBAAC,EAAD,CACER,MAAM,gBACNM,KAAK,QACLO,KAAK,QACLiB,YAAY,kBACZtB,UAAU,UAGZ,kBAAC,IAAD,CACEF,KAAK,UACLuB,OAAQ,SAACE,GAAD,OACN,6BACGL,EAAOM,SAAWN,EAAOM,QAAQC,OAAS,EACvCP,EAAOM,QAAQE,KAAI,SAACC,EAAQC,GAAT,OACnB,yBAAKC,IAAKD,EAAO5B,UAAU,SACzB,kBAAC,IAAD,CACEH,GAAI+B,EACJ9B,KAAI,kBAAa8B,GACjBE,aAAc,SAACC,GACbA,EAAIC,iBACJT,EAAaU,OAAOL,EAAO,IAC3BM,SAASC,eAAejB,EAAOM,QAAQC,OAAS,GAAGW,eAMzDb,EAAac,KAAK,IACtB,kBAAC,IAAD,CACEC,QAAS,WACPJ,SAASC,eAAejB,EAAOM,QAAQC,OAAS,GAAGW,QACnDb,EAAac,KAAK,KAEpBrC,UAAU,QACVK,KAAK,WANP,WAcN,kBAAC,EAAD,CAAYP,KAAK,iBAAjB,sBAEA,kBAAC,IAAD,CAAQyC,SAAS,SAASvC,UAAU,QAAQK,KAAK,WAAjD,gBCvHKmC,G,OAPH,kBACV,yBAAKxC,UAAU,OACb,iIACA,kBAAC,EAAD,SCFJyC,IAASpB,OAAO,kBAAC,EAAD,MAASa,SAASC,eAAe,W","file":"static/js/main.428b8561.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  Formik, Form, FieldArray, useField,\n} from 'formik';\nimport * as Yup from 'yup';\nimport { Input, Checkbox, Button } from 'antd';\n\nimport './form.scss';\n\nconst MyTextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and also replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  const { id, name } = props;\n  return (\n    <>\n      <label htmlFor={id || name}>{label}</label>\n      <Input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? <div className=\"error\">{meta.error}</div> : null}\n    </>\n  );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n  // We need to tell useField what type of input this is\n  // since React treats radios and checkboxes differently\n  // than inputs/select/textarea.\n  const [field, meta] = useField({ ...props, type: 'checkbox' });\n  return (\n    <>\n      <label className=\"checkbox\">\n        <Checkbox {...field} {...props} />\n        {children}\n      </label>\n      {meta.touched && meta.error ? <div className=\"error\">{meta.error}</div> : null}\n    </>\n  );\n};\n\n// const addField = (values, arrayHelpers) => {\n//   arrayHelpers.push('');\n//   document.getElementById('0').focus();\n// };\n\n// And now we can use these\nconst SignupForm = () => (\n  <>\n    <h1>Subscribe!</h1>\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n        acceptedTerms: false, // added for our checkbox\n      }}\n      validationSchema={Yup.object({\n        firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n        lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n        email: Yup.string().email('Invalid email address').required('Required'),\n        acceptedTerms: Yup.boolean()\n          .required('Required')\n          .oneOf([true], 'You must accept the terms and conditions.'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          // alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n      render={({ values }) => (\n        <Form className=\"form\">\n          <MyTextInput\n            label=\"First Name\"\n            name=\"firstName\"\n            type=\"text\"\n            placeholder=\"Jane\"\n            className=\"field\"\n          />\n          <MyTextInput\n            label=\"Last Name\"\n            name=\"lastName\"\n            type=\"text\"\n            placeholder=\"Doe\"\n            className=\"field\"\n          />\n          <MyTextInput\n            label=\"Email Address\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"jane@formik.com\"\n            className=\"field\"\n          />\n\n          <FieldArray\n            name=\"friends\"\n            render={(arrayHelpers) => (\n              <div>\n                {values.friends && values.friends.length > 0\n                  ? values.friends.map((friend, index) => (\n                    <div key={index} className=\"field\">\n                      <Input\n                        id={index}\n                        name={`friends.${index}`}\n                        onPressEnter={(evt) => {\n                          evt.preventDefault();\n                          arrayHelpers.insert(index, '');\n                          document.getElementById(values.friends.length - 1).focus();\n                          // console.log(arrayHelpers);\n                        }}\n                      />\n                    </div>\n                  ))\n                  : arrayHelpers.push('')}\n                <Button\n                  onClick={() => {\n                    document.getElementById(values.friends.length - 1).focus();\n                    arrayHelpers.push('');\n                  }}\n                  className=\"field\"\n                  type=\"primary\"\n                >\n                  Add\n                </Button>\n              </div>\n            )}\n          />\n\n          <MyCheckbox name=\"acceptedTerms\">I accept the terms</MyCheckbox>\n\n          <Button htmlType=\"submit\" className=\"field\" type=\"primary\">\n            Submit\n          </Button>\n        </Form>\n      )}\n    />\n  </>\n);\n\nexport default SignupForm;\n","import React from 'react';\nimport Form from '../form/form4';\n\nimport './app.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <h2>Форма регистрации</h2>\n    <Form />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.scss';\nimport App from './components/app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}